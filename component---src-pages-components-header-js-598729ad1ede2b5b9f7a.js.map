{"version":3,"file":"component---src-pages-components-header-js-598729ad1ede2b5b9f7a.js","mappings":"sLAsBA,EAde,WACb,OACE,0BAAQA,UCTW,mCDUjB,uBAAKA,UCTQ,+BDUX,sBAAIA,UCTU,kCDUZ,gBAAC,KAAD,CAAMC,GAAG,KAAT,WAEF,gBAACC,EAAA,QAAD,U,mDETFC,EAAe,SAACC,GACpB,IAAMC,GAAWC,EAAAA,EAAAA,IAAe,cAoBhC,GAAwBC,EAAAA,EAAAA,UAAS,IAA1BC,EAAP,KAAaC,EAAb,MACAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,GACbN,EAASO,kBAAkBC,MAAMC,KAAI,SAACC,GACpCJ,EAAKK,KAAKD,EAAEE,KAAKC,gBAEnBT,EAAQE,KACP,IAGH,OAAkCJ,EAAAA,EAAAA,UAAS,IAApCP,EAAP,KAAkBmB,EAAlB,MACAT,EAAAA,EAAAA,YAAU,WACR,IAAIU,EAUJ,OAREA,EADEhB,EAAMiB,OAAyB,KAAhBjB,EAAMkB,MAClBC,YAAW,WACdJ,EAAa,YACZ,KAEEI,YAAW,WACdJ,EAAa,MACZ,KAEE,WACLK,aAAaJ,MAEd,CAAChB,EAAMiB,MAAOjB,EAAMkB,QAGvB,OAA4Bf,EAAAA,EAAAA,UAAS,IAA9BkB,EAAP,KAAeC,EAAf,KAoBA,OANAhB,EAAAA,EAAAA,YAAU,WAZK,IACPY,EACAX,EAWc,KAAhBP,EAAMkB,QAZJA,EAAQlB,EAAMkB,MAAMK,cACpBhB,EAAOH,EAAKoB,QAAO,SAACb,GAKxB,OAAkC,KAJtB,WACVA,EAAEc,MAAMF,cADE,WAEVZ,EAAEe,QAAQH,cAFA,UAIEI,QAAQT,MAExBI,EAAUf,MAOT,CAACP,EAAMkB,QAGR,uBAAKtB,UAAWA,GACd,uBAAKA,UAAU,eACb,wBAAMA,UAAU,OACd,yBAAIyB,EAAOO,QADb,YAGA,0BACGP,EAAOX,KAAI,SAACC,GACX,OACE,sBAAIkB,IAAKlB,EAAEmB,MACT,gBAAC,KAAD,CAAMjC,GAAE,SAAWc,EAAEmB,KAAb,KAMN,2BAAK,4BAAOnB,EAAEc,OAAa,2BAAM,4BAAOd,EAAEe,mBAqC5D,UAxBe,SAAC1B,GACd,OAA0BG,EAAAA,EAAAA,WAAS,GAA5Bc,EAAP,KAAcc,EAAd,KACA,GAA0B5B,EAAAA,EAAAA,UAAS,IAA5Be,EAAP,KAAcc,EAAd,KAUA,OACE,uBAAKpC,UAAWI,EAAMJ,UAAWqB,MAAOA,GACtC,yBACEgB,KAAK,OACLC,QAbU,WACdH,GAAS,IAaLI,OAXS,WACbJ,GAAS,IAWLK,SATW,SAACzB,GAChBqB,EAASrB,EAAE0B,OAAOnB,UAUhB,gBAACnB,EAAD,CAAckB,MAAOA,EAAOC,MAAOA","sources":["webpack://myBlog/./src/pages/components/Header.js","webpack://myBlog/./src/pages/components/Header.module.css","webpack://myBlog/./src/pages/components/Search.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport * as styles from \"./Header.module.css\";\nimport { menu } from \"./_Variables\";\nimport Search from \"./Search\";\n// import Modal from \"./Modal\";\n\nconst Header = () => {\n  return (\n    <header className={styles.container}>\n      <div className={styles.inner}>\n        <h1 className={styles.siteName}>\n          <Link to=\"/\">Header</Link>\n        </h1>\n        <Search />\n        {/* <Modal /> */}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","// extracted by mini-css-extract-plugin\nexport var container = \"Header-module--container--3I6Xw\";\nexport var inner = \"Header-module--inner--3rdw3\";\nexport var siteName = \"Header-module--siteName--2WuQ0\";\nexport var globalNavi = \"Header-module--globalNavi--j5bJJ\";\nexport var globalNaviItem = \"Header-module--globalNaviItem--2HDOZ\";","import React, { useState, useEffect } from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { Link } from \"gatsby\";\n// import TextHighlighter from \"./Highlighter\";\n\n\nconst SearchResult = (props) => {\n  const tempData = useStaticQuery(graphql`\n    query SearchData {\n      allMarkdownRemark(\n        sort: { fields: [frontmatter___posted], order: DESC }\n        limit: 1000\n      ) {\n        edges {\n          node {\n            frontmatter {\n              posted(formatString: \"YYYY-MM-DD\")\n              title\n              slug\n              extract\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const temp = [];\n    tempData.allMarkdownRemark.edges.map((e) => {\n      temp.push(e.node.frontmatter);\n    });\n    setData(temp);\n  }, []);\n\n  //表示非表示の切り替え\n  const [className, setClassName] = useState(\"\");\n  useEffect(() => {\n    let id;\n    if (props.focus && props.value !== \"\") {\n      id = setTimeout(() => {\n        setClassName(\"active\");\n      }, 100);\n    } else {\n      id = setTimeout(() => {\n        setClassName(\"\");\n      }, 100);\n    }\n    return () => {\n      clearTimeout(id);\n    };\n  }, [props.focus, props.value]);\n\n  //検索処理\n  const [result, setResult] = useState([]);\n\n  const search = () => {\n    const value = props.value.toLowerCase();\n    const temp = data.filter((e) => {\n      const target = `\n      ${e.title.toLowerCase()}\n      ${e.extract.toLowerCase()}\n    `;\n      return target.indexOf(value) !== -1;\n    });\n    setResult(temp);\n  };\n\n  useEffect(() => {\n    if (props.value !== \"\") {\n      search();\n    }\n  }, [props.value]);\n\n  return (\n    <div className={className}>\n      <div className=\"resultInner\">\n        <span className=\"res\">\n          <b>{result.length}</b>件ヒットしました\n        </span>\n        <ul>\n          {result.map((e) => {\n            return (\n              <li key={e.slug}>\n                <Link to={`/post/${e.slug}/`}>\n                  {/* <TextHighlighter\n                    title={e.title}\n                    extract={e.extract}\n                    includes={props.value}\n                  /> */}\n                  <div><span>{e.title}</span><br /><span>{e.extract}</span></div>\n                  \n                  \n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst Search = (props) => {\n  const [focus, setFocus] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const onFocus = () => {\n    setFocus(true);\n  };\n  const onBlur = () => {\n    setFocus(false);\n  };\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n  return (\n    <div className={props.className} focus={focus}>\n      <input\n        type=\"text\"\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onChange={onChange}\n      />\n      <SearchResult focus={focus} value={value} />\n    </div>\n  );\n};\nexport default Search;\n"],"names":["className","to","Search","SearchResult","props","tempData","useStaticQuery","useState","data","setData","useEffect","temp","allMarkdownRemark","edges","map","e","push","node","frontmatter","setClassName","id","focus","value","setTimeout","clearTimeout","result","setResult","toLowerCase","filter","title","extract","indexOf","length","key","slug","setFocus","setValue","type","onFocus","onBlur","onChange","target"],"sourceRoot":""}