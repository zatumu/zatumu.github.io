@use "sass:math";
// math.div(100%, 3)

// ファンクションたち
// @forwardでファンクションが別ファイルから利用できないのはなぜだろう
@function round-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "round");
}

// Ceil (切り上げ)
@function ceil-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "ceil");
}

// Floor (切り捨て)
@function floor-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "floor");
}

@function to-fixed($number, $digits: 0, $round: "round") {
  $n: 1;

  // $number must be a number
  @if type-of($number) !=number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  // $digits must be a unitless number s
  @if type-of($digits) !=number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  @for $i from 1 through $digits {
    $n: $n * 10;
  }

  @if $round== "round" {
    @return math.div(round($number * $n) , $n);
  } @else if $round== "ceil" {
    @return math.div(ceil($number * $n) , $n);
  } @else if $round== "floor" {
    @return math.div(floor($number * $n) , $n);
  } @else {
    @warn '#{ $round } is undefined keyword.';
    @return $number;
  }
}

  //イージング
  @function returnEaseTypeToCubicBezier($type) {
    $easingValue: "";
  
    @if $type == "linear" {
      $easingValue: "0.250, 0.250, 0.750, 0.750";
    } @else if $type == "ease" {
      $easingValue: "0.250, 0.100, 0.250, 1.000";
    } @else if $type == "ease-in" {
      $easingValue: "0.420, 0.000, 1.000, 1.000";
    } @else if $type == "ease-out" {
      $easingValue: "0.000, 0.000, 0.580, 1.000";
    } @else if $type == "ease-in-out" {
      $easingValue: "0.420, 0.000, 0.580, 1.000";
    } @else if $type == "easeInQuad" {
      $easingValue: "0.550, 0.085, 0.680, 0.530";
    } @else if $type == "easeInCubic" {
      $easingValue: "0.550, 0.055, 0.675, 0.190";
    } @else if $type == "easeInQuart" {
      $easingValue: "0.895, 0.030, 0.685, 0.220";
    } @else if $type == "easeInQuint" {
      $easingValue: "0.755, 0.050, 0.855, 0.060";
    } @else if $type == "easeInSine" {
      $easingValue: "0.470, 0.000, 0.745, 0.715";
    } @else if $type == "easeInExpo" {
      $easingValue: "0.950, 0.050, 0.795, 0.035";
    } @else if $type == "easeInCirc" {
      $easingValue: "0.600, 0.040, 0.980, 0.335";
    } @else if $type == "easeInBack" {
      $easingValue: "0.600, -0.280, 0.735, 0.045";
    } @else if $type == "easeOutQuad" {
      $easingValue: "0.250, 0.460, 0.450, 0.940";
    } @else if $type == "easeOutCubic" {
      $easingValue: "0.215, 0.610, 0.355, 1.000";
    } @else if $type == "easeOutQuart" {
      $easingValue: "0.165, 0.840, 0.440, 1.000";
    } @else if $type == "easeOutQuint" {
      $easingValue: "0.230, 1.000, 0.320, 1.000";
    } @else if $type == "easeOutSine" {
      $easingValue: "0.390, 0.575, 0.565, 1.000";
    } @else if $type == "easeOutExpo" {
      $easingValue: "0.190, 1.000, 0.220, 1.000";
    } @else if $type == "easeOutCirc" {
      $easingValue: "0.075, 0.820, 0.165, 1.000";
    } @else if $type == "easeOutBack" {
      $easingValue: "0.175, 0.885, 0.320, 1.275";
    } @else if $type == "easeInOutQuad" {
      $easingValue: "0.455, 0.030, 0.515, 0.955";
    } @else if $type == "easeInOutCubic" {
      $easingValue: "0.645, 0.045, 0.355, 1.000";
    } @else if $type == "easeInOutQuart" {
      $easingValue: "0.770, 0.000, 0.175, 1.000";
    } @else if $type == "easeInOutQuint" {
      $easingValue: "0.860, 0.000, 0.070, 1.000";
    } @else if $type == "easeInOutSine" {
      $easingValue: "0.445, 0.050, 0.550, 0.950";
    } @else if $type == "easeInOutExpo" {
      $easingValue: "1.000, 0.000, 0.000, 1.000";
    } @else if $type == "easeInOutCirc" {
      $easingValue: "0.785, 0.135, 0.150, 0.860";
    } @else if $type == "easeInOutBack" {
      $easingValue: "0.680, -0.550, 0.265, 1.550";
    }
    @return unquote($easingValue);
  }
  // cubic-bezierの呼び出し
  @function ease($type) {
    @return unquote("cubic-bezier(#{returnEaseTypeToCubicBezier($type)})");
  }


//ブレイクポイント・要素の幅はemかvwで指定
//1400pxくらい→600くらい
//14px：100em→42em 16px: 88em→38em 18px:78em→ 20px:70em→30em
//ブレイクポイントをemで指示する場合は、フォントサイズが可変後の値で設定する
// • スマートフォン：599px [max-width : 599px]
// • タブレット：1024px [max-width : 1024px]
// • PC：設定なし（実質1025px以上）

//ブレークポイント
$breakPoint1: 80em;
$breakPoint2: 38em;
$breakPoint3: 20em;

$sizeSm: 1em; //標準サイズ
$denominator: 6;
//サイズ用のCSS変数
//サイズユニットを「調和数列」で定義する
$sizeXxs: round-decimal($sizeSm * math.div($denominator , 10), 2);
$sizeXs: round-decimal($sizeSm * math.div($denominator , 8), 2);
$sizeS: round-decimal($sizeSm * math.div($denominator , 7), 2);
//標準サイズ：size-sm=1em
$sizeM: round-decimal($sizeSm * math.div($denominator , 5), 2);
$sizeSl: round-decimal($sizeSm * math.div($denominator , 4), 2);
$sizeL: round-decimal($sizeSm * math.div($denominator , 3), 2);
$sizeXl: round-decimal($sizeSm * math.div($denominator , 2), 2);
$sizeXxl: round-decimal($sizeSm * math.div($denominator , 1), 2);

$denominatorSp: 6;
$sizeXxsSp: round-decimal($sizeSm * math.div($denominatorSp , 10), 2);
$sizeXsSp: round-decimal($sizeSm * math.div($denominatorSp , 8), 2);
$sizeSSp: round-decimal($sizeSm * math.div($denominatorSp , 7), 2);
//標準サイズ：size-sm=1em
$sizeMSp: round-decimal($sizeSm * math.div($denominatorSp , 5), 2);
$sizeSlSp: round-decimal($sizeSm * math.div($denominatorSp , 4), 2);
$sizeLSp: round-decimal($sizeSm * math.div($denominatorSp , 3), 2);
$sizeXlSp: round-decimal($sizeSm * math.div($denominatorSp , 2), 2);
$sizeXxlSp: round-decimal($sizeSm * math.div($denominatorSp , 2), 2);

:root {
  //コンテンツの幅
  --contentWidth: 100vw;
  --contentWidthInner: 80em;

  //フォントサイズ
  --fontSize: 14px;

  //サイズ設定：emを単位に相対的に定義する
  //サイズユニットを「調和数列」で定義する
  //サイズ用のCSS変数
  --sizeXxs: #{$sizeXxs};
  --sizeXs: #{$sizeXs};
  --sizeS: #{$sizeS};
  --sizeSm: #{$sizeSm}; //標準サイズ
  --sizeM: #{$sizeM};
  --sizeSl: #{$sizeSl};
  --sizeL: #{$sizeL};
  --sizeXl: #{$sizeXl};
  --sizeXxl: #{$sizeXxl};

  //行の高さの設定
  --lineHeightNone: var(--sizeSm);
  --lineHeightS: var(--sizeM);
  --lineHeightM: var(--sizeL);
  --lineHeightL: var(--sizeXl);

  //フォントウェイトはできれば1種類で2種類まで
  --weightPrimary: 500;
  --weightSecondary: 700;

  //色の設定
  --colorText: #463;
  --colorBackground: ddd;
  --colorScrollbar: rgba(160,230,180,0.5);
  --black: #555;
  --white: #fff;
  --offWhite: #fdfdfd;
  --gray: #bbb;
  --colorPrimary: #291;
  --colorSecondary: #aaa;
  --colorTertiary: #ccc;
  --colorAccent: #f43;

  //線の設定
  --borderGray: solid 1px var(--gray);
  --borderPrimary: solid 1px var(--colorPrimary);

  //イージングの設定（正しく動かない）
  // --ease: ease("ease-in-out");

  //z-index制御用
  --zIndexPrimary: 100;
  --zIndexHeader: 200;
  --zIndexModal: 300;

  // @include breakPoint(2) {
  //   --fontSize: 12px;

  //   --sizeXxs: #{$sizeXxsSp};
  //   --sizeXs: #{$sizeXsSp};
  //   --sizeS: #{$sizeSSp};
  //   --sizeSm: #{$sizeSm};
  //   --sizeM: #{$sizeMSp};
  //   --sizeSl: #{$sizeSlSp};
  //   --sizeL: #{$sizeLSp};
  //   --sizeXl: #{$sizeXlSp};
  //   --sizeXxl: #{$sizeXxlSp};

  // }
}

@media (prefers-color-scheme: dark) {
  :root {
    --colorText: #ddd;
    --colorBackground: #463;
    --colorScrollbar: rgba(160,230,180,0.5);
    --black: #fff;
    --white: #555;
    --offWhite: #6f6f6f;
    --gray: #333;
    --colorPrimary: #fff;
    --colorSecondary: #aaa;
    --colorTertiary: #ccc;
    --colorAccent: #f43;
  }
}
