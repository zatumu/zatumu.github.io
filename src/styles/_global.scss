@use "sass:math";
@use "sass:map";
// math.div(100%, 3)

//==============================================
//SCSSファンクション
//==============================================*

// @forwardでファンクションが別ファイルから利用できないのはなぜだろう
@function round-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "round");
}

// Ceil (切り上げ)
@function ceil-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "ceil");
}

// Floor (切り捨て)
@function floor-decimal($number, $digits: 0) {
  @return to-fixed($number, $digits, "floor");
}

@function to-fixed($number, $digits: 0, $round: "round") {
  $n: 1;

  // $number must be a number
  @if type-of($number) !=number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  // $digits must be a unitless number s
  @if type-of($digits) !=number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  @for $i from 1 through $digits {
    $n: $n * 10;
  }

  @if $round== "round" {
    @return math.div(round($number * $n), $n);
  } @else if $round== "ceil" {
    @return math.div(ceil($number * $n), $n);
  } @else if $round== "floor" {
    @return math.div(floor($number * $n), $n);
  } @else {
    @warn '#{ $round } is undefined keyword.';
    @return $number;
  }
}

//==============================================
//SCSS変数
//==============================================*

//ブレイクポイント・要素の幅はemかvwで指定
//1400pxくらい→600くらい
//14px：100em→42em 16px: 88em→38em 18px:78em→ 20px:70em→30em
//ブレイクポイントをemで指示する場合は、フォントサイズが可変後の値で設定する
// • スマートフォン：599px [max-width : 599px]
// • タブレット：1024px [max-width : 1024px]
// • PC：設定なし（実質1025px以上）

//ブレークポイント
$breakpoint: (
  S: "38em",
  M: "20em",
  L: "80em",
);

$sizeSm: 1em; //標準サイズ
$denominator: 6;
//サイズ用のCSS変数
//サイズユニットを「調和数列」で定義する
$sizeXxs: round-decimal($sizeSm * math.div($denominator, 10), 2);
$sizeXs: round-decimal($sizeSm * math.div($denominator, 8), 2);
$sizeS: round-decimal($sizeSm * math.div($denominator, 7), 2);
//標準サイズ：size-sm=1em
$sizeM: round-decimal($sizeSm * math.div($denominator, 5), 2);
$sizeSl: round-decimal($sizeSm * math.div($denominator, 4), 2);
$sizeL: round-decimal($sizeSm * math.div($denominator, 3), 2);
$sizeXl: round-decimal($sizeSm * math.div($denominator, 2), 2);
$sizeXxl: round-decimal($sizeSm * math.div($denominator, 1), 2);

$denominatorSp: 6;
$sizeXxsSp: round-decimal($sizeSm * math.div($denominatorSp, 10), 2);
$sizeXsSp: round-decimal($sizeSm * math.div($denominatorSp, 8), 2);
$sizeSSp: round-decimal($sizeSm * math.div($denominatorSp, 7), 2);
//標準サイズ：size-sm=1em
$sizeMSp: round-decimal($sizeSm * math.div($denominatorSp, 5), 2);
$sizeSlSp: round-decimal($sizeSm * math.div($denominatorSp, 4), 2);
$sizeLSp: round-decimal($sizeSm * math.div($denominatorSp, 3), 2);
$sizeXlSp: round-decimal($sizeSm * math.div($denominatorSp, 2), 2);
$sizeXxlSp: round-decimal($sizeSm * math.div($denominatorSp, 2), 2);

//==============================================
//SCSS mixin
//==============================================*

@mixin mediaQuery($bp) {
  @media screen and (max-width:#{map-get($breakpoint, $bp)}) {
    @content;
  }
}

//==============================================
//CSS変数
//==============================================*

:root {
  //コンテンツの幅
  --contentWidth: 100vw;
  --contentWidthInner: 80em;

  // コンテンツインナーと画面サイズの差
  --contentsWidthInnerSide: calc((100vw - var(--contentWidthInner)) / 2);

  //フォントサイズ
  --fontSize: 14px;

  //サイズ設定：emを単位に相対的に定義する
  //サイズユニットを「調和数列」で定義する
  //サイズ用のCSS変数
  --sizeXxs: #{$sizeXxs};
  --sizeXs: #{$sizeXs};
  --sizeS: #{$sizeS};
  --sizeSm: #{$sizeSm}; //標準サイズ
  --sizeM: #{$sizeM};
  --sizeSl: #{$sizeSl};
  --sizeL: #{$sizeL};
  --sizeXl: #{$sizeXl};
  --sizeXxl: #{$sizeXxl};

  //行の高さの設定
  --lineHeightNone: var(--sizeSm);
  --lineHeightS: var(--sizeM);
  --lineHeightM: var(--sizeL);
  --lineHeightL: var(--sizeXl);

  //フォントウェイトはできれば1種類で2種類まで
  --weightPrimary: 500;
  --weightSecondary: 700;

  //色の設定
  --colorText: #463;
  --colorBackground: #ddd;
  --colorScrollbar: rgba(160, 230, 180, 0.5);
  --colorLinePrimary: #ccc;

  --black: #555;
  --white: #fff;
  --offWhite: #fdfdfd;
  --gray: #bbb;
  --colorPrimary: #291;
  --colorSecondary: #aaa;
  --colorTertiary: #ccc;
  --colorAccent: #f43;

  //線の設定
  --borderGray: solid 1px var(--gray);
  --borderPrimary: solid 1px var(--colorPrimary);

  //イージングの設定（正しく動かない）
  // --ease: ;

  //z-index制御用
  --zIndexPrimary: 100;
  --zIndexHeader: 200;
  --zIndexModal: 300;

  // ヘッダー周りで共有する変数
  --identityHeight: 1lh;
  --headerPaddingVertical: var(--sizeM);
  --headerPaddingHorizontal: var(--sizeM);
  --headerVerticalSize: calc(
    var(--headerPaddingVertical) * 2 + var(--headerPaddingVertical)
  );
  --headerVerticalCenterPosition: calc(var(--headerVerticalSize) / 2);

  @include mediaQuery(S) {
    --fontSize: 12px;

    --sizeXxs: #{$sizeXxsSp};
    --sizeXs: #{$sizeXsSp};
    --sizeS: #{$sizeSSp};
    --sizeSm: #{$sizeSm};
    --sizeM: #{$sizeMSp};
    --sizeSl: #{$sizeSlSp};
    --sizeL: #{$sizeLSp};
    --sizeXl: #{$sizeXlSp};
    --sizeXxl: #{$sizeXxlSp};
    //コンテンツの幅
    --contentWidth: 100vw;
    --contentWidthInner: 90%;
  }
}

@media (prefers-color-scheme: dark) {
  :root {
    --colorText: #ddd;
    --colorBackground: #463;
    --colorScrollbar: rgba(160, 230, 180, 0.5);
    --black: #fff;
    --white: #555;
    --offWhite: #6f6f6f;
    --gray: #333;
    --colorPrimary: #fff;
    --colorSecondary: #aaa;
    --colorTertiary: #ccc;
    --colorAccent: #f43;
  }
}
